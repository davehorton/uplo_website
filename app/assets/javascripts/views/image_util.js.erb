/**
 * Utility methods for image processing.
 */
image_util = {
  // Convert inch -> pixel
  inch_to_px: function(inch, dpi){
    if(!dpi)
      dpi = 150; // Default DPI
    return inch * dpi;
  },

  // Detect the curent DPI of the screen.
  // Requires: jQuery.
  detect_dpi: function(){
    var tmp_div = $('<div style="display: block; height: 1in; left: -100%; \
                    position: absolute; top: -100%;  width: 1in; padding:0; margin:0;"></div>');
    $('body').append(tmp_div);
    var width = $(tmp_div).width();
    $(tmp_div).remove();
    return width;
  },

  // Detect the actual size of the image.
  // The image must be loaded before calling this method.
  // Otherwise it will be not correct.
  // Example:
  // $(img).load(function(){
  //    var img_size = image_util.detect_image_size($(this));
  // });
  //
  // In case the image was cached.
  // if($(img).prop('complete')){
  //    $(img).load();
  // }
  detect_image_size: function(img){
    var tmp_img = $('<img style="display: block; margin: 0; padding: 0; width: auto; height: auto; \
                      position: absolute; top: -100%; left: -100%;" \
                      src="' + $(img).attr('src') + '"/>');
    $('body').append(tmp_img);
    var result = { width: $(tmp_img).width(), height: $(tmp_img).height() };
    $(tmp_img).remove();
    return result;
  },

  // Resize an image.
  // Requires: jquery.center.js plugin.
  resize_image: function(img, params){
    if(!params.ratio)
      params.ratio = 1.5;

    var new_w = params.width;
    var new_h = params.height;
    var correct_h = new_w / params.ratio;

    if(correct_h < new_h) {
      new_w = new_h * params.ratio;
    } else {
      var correct_w = new_h * params.ratio;
      if(correct_w < new_w){
        new_h = correct_h;
      }
    }

    $(img).width(new_w).height(new_h);

    $(img).css('max-width', new_w);
    $(img).css('max-height', new_h);

    $(img).center();

    return {width: new_w, height: new_h};
  },

  resize_frame: function (img, params){
    var parent = $(img).parents('.image-container');
    if(!params)
      params = {};

    if(params.auto){
      $(parent).width('auto');
      $(parent).height('auto');
    } else {
      var width = $(img).width();
      if(params.width > 0 && width > params.width)
        width = params.width;

      var height = $(img).height();
      if(params.height > 0 && height > params.height)
        height = params.height;

      var ratio = 1;

      if(!width){
        width = parseFloat($(img).attr('data-width'));
      }
      var parent_width = parseFloat($(parent).css('max-width'));
      if(width > 0 && width <= parent_width){
        $(parent).width(width);
      }
      else if(width > 0 && width > parent_width){
        ratio = parent_width/width;
        $(parent).width(parent_width);
      }

      if(height > 0){
        $(parent).height(ratio * height);
      }

      $(img).center();
    }
  },

  // Calculate ratio from the size string:
  // Ex: ratio_from_size('5x7') //=> 0.714
  ratio_from_size: function(size_string){
    var sizes = size_string.toLowerCase().split('x', 2);
    var ratio = 0;
    if(sizes.length == 2){
      sizes[0] = parseFloat(sizes[0]);
      sizes[1] = parseFloat(sizes[1]);
      if(sizes[1] > 0)
        ratio = sizes[0] / sizes[1];
    }

    return ratio;
  }
};


/**
 * Methods for order's previewing
 */
order_preview = {
  max_width: 638,
  padding: 5,

  // Alias from input values to meaningful values.
  frame_alias: {
    '1': 'print_only_gloss',
    '2': 'canvas',
    '3': 'plexi',
    '4': 'black',
    '5': 'white',
    '6': 'light_wood',
    '7': 'rustic_wood',
    '8': 'print_only_luster'
  },

  // Image frames info
  frames: {

    canvas: {
      scalable: false,
      url: "<%= asset_path('img-frames/canvas.png') %>"
    },

    plexi: {
      scalable: false,
      url: "<%= asset_path('img-frames/plexi.png') %>"
    },

    black: {
      scalable: true,
      url_top: "<%= asset_path('img-frames/black-top.png') %>",
      url_right: "<%= asset_path('img-frames/black-right.png') %>",
      url_bottom: "<%= asset_path('img-frames/black-bottom.png') %>",
      url_left: "<%= asset_path('img-frames/black-left.png') %>",
      margin_top: 83,
      margin_left: 83,

      // If you don't specify the corner_width, it will auto-detect and get the margin_left instead.
      corner_width: 250
    },

    white: {
      scalable: true,
      url_top: "<%= asset_path('img-frames/white-top.png') %>",
      url_right: "<%= asset_path('img-frames/white-right.png') %>",
      url_bottom: "<%= asset_path('img-frames/white-bottom.png') %>",
      url_left: "<%= asset_path('img-frames/white-left.png') %>",
      margin_top: 81,
      margin_left: 81
    },

    light_wood: {
      scalable: true,
      url_top: "<%= asset_path('img-frames/lightwood-top.png') %>",
      url_right: "<%= asset_path('img-frames/lightwood-right.png') %>",
      url_bottom: "<%= asset_path('img-frames/lightwood-bottom.png') %>",
      url_left: "<%= asset_path('img-frames/lightwood-left.png') %>",
      margin_top: 107,
      margin_left: 101,

      // If you don't specify the corner_width, it will auto-detect and get the margin_left instead.
      corner_width: 118
    },

    rustic_wood: {
      scalable: true,
      url_top: "<%= asset_path('img-frames/rustic-top.png') %>",
      url_right: "<%= asset_path('img-frames/rustic-right.png') %>",
      url_bottom: "<%= asset_path('img-frames/rustic-bottom.png') %>",
      url_left: "<%= asset_path('img-frames/rustic-left.png') %>",
      margin_top: 122,
      margin_left: 123,

      // If you don't specify the corner_width, it will auto-detect and get the margin_left instead.
      corner_width: 350
    }
  },

  // Preload images for better UX.
  preload_images: function(){

  },

  // Adjust frame's size and image's size with frame's id.
  adjust_image_frame_sizes_with_num: function(frame_num){
    var frame_name = order_preview.frame_alias[frame_num];
    order_preview.adjust_image_frame_sizes(frame_name);
  },

  // Adjust frame's size and image's size with frame's name
  adjust_image_frame_sizes: function(frame_name){
    var frame_info = order_preview.frames[frame_name];

    var frame = $('#preview-frame .image-frame');
    var img = $('#preview-frame > img.image');

/*
    if(frame_name == 'canvas' || frame_name == 'plexi'){
      // remove jcrop
      image_cropper.removeJcrop();
      // Hide the image
      $(img).css('display', 'none');
      frame.css({
        position: 'relative'
      });
    }
    else{
*/
      // Show the image
      $(img).css({
        display: 'inline-block',
        position: 'static'
      });
      frame.css({
        left: 0,
        position: 'absolute',
        top: 0
      });
//    }

/*
    if(!frame_info){
      // Remove the frame
      $(frame).find('img').remove();

      // Restore the image's size
      $(img).width('638px');
      $(img).height('auto');
      $('#preview-frame').height('auto');

      // Exit!
      return false;
    }

    if(!frame_info.scalable){
      // Change frame's image
      var frame_img = $('<img src="' + frame_info.url + '"/>');
      frame.html(frame_img);

      $(frame_img).load(function(){
        // Adjust the frame if the image is fixed.
        var height = $(this).height();
        $(frame_img).parent().height(height);
        $('#preview-frame').height(height);
      });

      if($(frame_img).prop('complete')){
        $(frame_img).load();
      }
    }

    // Show the frame layer in front of the image.
    frame.css('z-index', 10);
    img.css('z-index', 9);

    // Scale the image and frame to fit the preview frame
    if(frame_info.scalable){
      var img_width = parseFloat($(img).attr('data-original-width'));
      var img_height = parseFloat($(img).attr('data-original-height'));

      // Store the original width and height of the image.
      if(!img_width || !img_height){
        var img_size = image_util.detect_image_size($(img));
        img_width = img_size.width;
        $(img).attr('data-original-width', img_width);

        img_height = img_size.height;
        $(img).attr('data-original-height', img_height);
      }

      if(img_width <= 0 || img_height <= 0)
        return false;

      // Detect the ratio based on current selected print-size.
      var ratio = image_util.ratio_from_size($('#line_item_size').val());
      if(ratio <= 0)
        ratio = 1; // Ensure we won't devide by zero.

      // Because our current ratio is always the result of min_number/max_number,
      // we must detect the image is portrait or landscape to get the correct ratio.
      if(img_width < img_height)
        ratio = 1/ratio; // Inverse the ratio.

      if(img_width > order_preview.max_width){
        //Adjust the image's width to not overflow the frame's width.
        img_width = order_preview.max_width;
        img_height = img_width * ratio;
      }

      // Begin calculating the frame size.
      var frame_width = img_width + frame_info.margin_left * 2;
      var frame_height = img_height + frame_info.margin_top * 2;

      if(frame_width >= order_preview.max_width){
        frame_width = order_preview.max_width;
        var new_img_width = frame_width - frame_info.margin_left * 2;

        // Scale the image's height with the ratio.
        var new_img_height = 0;
        if(ratio > 0 && ratio != 1)
          new_img_height = new_img_width * ratio;
        else
          new_img_height = img_height * (new_img_width / img_width);

        frame_height = new_img_height + frame_info.margin_top * 2;

        // Set new values
        img_width = new_img_width;
        img_height = new_img_height;
      }

      // Finally, change the image and frame size.
      $(frame).width(frame_width);
      $(frame).height(frame_height);
      $(img).width(img_width);
      $(img).height(img_height);

      // Setup frame element
      order_preview.init_frame_elements(frame, frame_info, frame_width, frame_height);

      // Change image position
      $(img).css({
        position: 'absolute',
        top: frame_info.margin_top,
        left: frame_info.margin_left
      });

      // Change the container frame
      $('#preview-frame').width(frame_width);
      $('#preview-frame').height(frame_height);
    }
*/
  },

  // Initialize the 8 elements that make the frame.
  // The frame must be scalable and have info of the 4 sides images (top, right, bottom, left).
  init_frame_elements: function(frame, frame_info, frame_width, frame_height){
    var url_top = frame_info.url_top;
    var url_right = frame_info.url_right;
    var url_bottom = frame_info.url_bottom;
    var url_left = frame_info.url_left;

    var images_queue = [];

    // Clean all
    $(frame).html("");

    // Build 4 sides of the frame.

    //====== top =======
    var frame_img = $('<img id="frame-top" src="' + url_top + '"/>');
    frame.html(frame_img);
    frame_img.css({
      position: 'absolute',
      left: 0,
      top: 0
    });
    frame_img.width(frame_width);
    frame_img.height(frame_info.margin_top);
    images_queue.push(frame_img);

    //====== right =======
    frame_img = $('<img id="frame-right" src="' + url_right + '"/>');
    frame.append(frame_img);
    frame_img.css({
      position: 'absolute',
      right: 0,
      top: frame_info.margin_top
    });
    frame_img.width(frame_info.margin_left);
    frame_img.height(frame_height - frame_info.margin_top*2 + order_preview.padding);
    images_queue.push(frame_img);

    //====== bottom =======
    frame_img = $('<img id="frame-bottom" src="' + url_bottom + '"/>');
    frame.append(frame_img);
    frame_img.css({
      position: 'absolute',
      left: 0,
      top: (frame_height - frame_info.margin_top)
    });
    frame_img.width(frame_width);
    frame_img.height(frame_info.margin_top);
    images_queue.push(frame_img);

    //====== left =======
    frame_img = $('<img id="frame-left" src="' + url_left + '"/>');
    frame.append(frame_img);
    frame_img.css({
      position: 'absolute',
      left: 0,
      top: frame_info.margin_top
    });
    frame_img.width(frame_info.margin_left);
    frame_img.height(frame_height - frame_info.margin_top*2 + order_preview.padding);
    images_queue.push(frame_img);

    // Build 4 corners of the frame.

    // Detect the corner size.
    var corner_width = frame_info.corner_width;
    if(!corner_width || corner_width <= 0)
      corner_width = frame_info.margin_left;

    //====== conner: top-left =======
    var tmp_img = $('<img id="frame-top-left" src="' + url_top + '"/>');
    tmp_img.css({
      position: 'absolute',
      top: 0,
      left: 0
    });
    $(tmp_img).height(frame_info.margin_top);
    images_queue.push(tmp_img);

    frame_img = $('<div></div>').append(tmp_img);
    frame.append(frame_img);
    frame_img.css({
      position: 'absolute',
      overflow: 'hidden',
      left: 0,
      top: 0,
      width: corner_width,
      height: frame_info.margin_top,
      'z-index': 11
    });

    //====== conner: top-right =======
    tmp_img = $('<img id="frame-top-right" src="' + url_top + '"/>');
    tmp_img.css({
      position: 'absolute',
      right: 0,
      top: 0
    });
    $(tmp_img).height(frame_info.margin_top);
    images_queue.push(tmp_img);

    frame_img = $('<div></div>').append(tmp_img);
    frame.append(frame_img);
    frame_img.css({
      position: 'absolute',
      overflow: 'hidden',
      right: 0,
      top: 0,
      width: corner_width,
      height: frame_info.margin_top,
      'z-index': 11
    });

    //====== conner: bottom-left =======
    tmp_img = $('<img id="frame-bottom-left" src="' + url_bottom + '"/>');
    tmp_img.css({
      position: 'absolute',
      left: 0,
      top: 0
    });
    $(tmp_img).height(frame_info.margin_top);
    images_queue.push(tmp_img);

    frame_img = $('<div></div>').append(tmp_img);
    frame.append(frame_img);
    frame_img.css({
      position: 'absolute',
      overflow: 'hidden',
      left: 0,
      bottom: 0,
      width: corner_width,
      height: frame_info.margin_top,
      'z-index': 11
    });

    tmp_img = $('<img id="frame-bottom-right" src="' + url_bottom + '"/>');
    tmp_img.css({
      position: 'absolute',
      right: 0,
      top: 0
    });
    $(tmp_img).height(frame_info.margin_top);
    images_queue.push(tmp_img);

    frame_img = $('<div></div>').append(tmp_img);
    frame.append(frame_img);
    frame_img.css({
      position: 'absolute',
      overflow: 'hidden',
      right: 0,
      bottom: 0,
      width: corner_width,
      height: frame_info.margin_top,
      'z-index': 11
    });
  },

  // Show/hide loading image.
  toggle_waiting: function(visible){
    var waiting_img = $('#preview-frame > #preview-waiting');
    if(visible){
      // Re-calculate the position
      var container_width = $('#preview-frame').width();
      var container_height = $('#preview-frame').height();
      var img_top = container_height/2 - $(waiting_img).height()/2;
      var img_left = container_width/2 - $(waiting_img).width()/2;

      // Show the image.
      $(waiting_img).css({
        display: 'block',
        top: img_top,
        left:img_left,
        position: 'absolute'
      });
    }
    else
      $(waiting_img).hide();
  },

  // Execute the callback method when all images in the queue finished loading.
  on_images_finish_loading: function(images_queue, callback){
    var count = images_queue.length;
    var exec_callback = function(){
      count = count - 1; // May me not 'thread-safe' :D
      if(count == 0){
        // Run the callback
        callback();
      }
    };

    for(var i = 0; i < images_queue.length; ++i){
      var img = images_queue[i];
      // On load correctly.
      $(img).load(function(){
        exec_callback();
      });

      // On error
      $(img).error(function(){
        exec_callback();
      });

      // In case the image was cached.
      if($(img).prop('complete')){
        exec_callback();
      }
    }
  },

  // Run all initial setup on page loaded.
  // This is the entry point of all other functions.
  setup: function(){
    // Change the frame
    //$('#line_item_moulding').change(function(){
    //  order_preview.adjust_image_frame_sizes_with_num($(this).val());
    //});

    // Change the image
    $('#line_item_size').change(function(){
      var url = $(this).find("option[value=" + $(this).val() + "]").attr('data-url');
      if(url){
        var img = $('#preview-frame > img.image');
        $(img).attr('src', url);
      }
    });

    // Force change the frame
    var img = $('#preview-frame > img.image');

    $(img).one('load', function(){
      var img_size = image_util.detect_image_size($(this));
      // Store the image's original size
      $(img).attr('data-original-width', img_size.width);
      $(img).attr('data-original-height', img_size.height);

      order_preview.adjust_image_frame_sizes_with_num($('#line_item_moulding').val());
      // add cropper on image load
      image_cropper.addJcrop();
    }).each(function() {
      // call load event if loaded from cache
      if(this.complete) $(this).load();
    });

    // Force change on page-loading.
    $('#line_item_size').change();

    // add cropper on size and moulding changes
    $(document).on('change', '#line_item_size', function () {
      image_cropper.addJcrop();
    });
  }
};

var image_cropper = {
  jcrop_api: null,
  x_shift_ratio: 1,
  y_shift_ratio: 1,

  addJcrop: function(){
    if (image_cropper.jcrop_api){
      image_cropper.jcrop_api.destroy();
      image_cropper.jcrop_api = null;
    }

    var frame_num = $('#line_item_moulding').val();
    var frame_name = order_preview.frame_alias[frame_num];
    //if (!(frame_name == 'canvas' || frame_name == 'plexi')){
      var dpi = 72;
      var size = $('#line_item_size-button .ui-selectmenu-status').text().split('x');
      var ratio_width = parseInt(size[0]) * dpi;
      var ratio_height = parseInt(size[1]) * dpi;
      var img_width = $('#preview-image').width();
      var img_height = $('#preview-image').height();
      image_cropper.x_shift_ratio = geometry.width / img_width;
      image_cropper.y_shift_ratio = geometry.height / img_height;

      var min_width = parseInt((img_width / geometry.width) * ratio_width);
      var min_height = parseInt((img_height / geometry.height) * ratio_height);

      if (cropped_dimensions.length == 0){
        var x1 = parseInt(img_width/2 - min_width/2);
        var x2 = x1 + min_width;
        var y1 = parseInt(img_height/2 - min_height/2);
        var y2 = y1 + min_height;
      }
      else {
        var w = parseInt(cropped_dimensions[0] / image_cropper.x_shift_ratio);
        var h = parseInt(cropped_dimensions[1] / image_cropper.y_shift_ratio);
        var x1 = parseInt(cropped_dimensions[2] / image_cropper.x_shift_ratio);
        var y1 = parseInt(cropped_dimensions[3] / image_cropper.y_shift_ratio);
        var x2 = x1 + w;
        var y2 = y1 + h;
        // reset crop dimensions so that if user changes size again, it resets
        cropped_dimensions = [];
      }

      var options = {
        onChange: image_cropper.update_crop,
        onSelect: image_cropper.update_crop,
        aspectRatio: ratio_width/ratio_height,
        minSize: [min_width, min_height],
        setSelect: [x1, y1, x2, y2]
      };
      $("#preview-image").Jcrop(options, function(){
        image_cropper.jcrop_api = this;
      });
    //}
  },

  removeJcrop: function(){
    if (image_cropper.jcrop_api){
      image_cropper.jcrop_api.destroy();
      image_cropper.jcrop_api = null;
    }
  },

  update_crop: function(coords){
    $("#crop_x").val(Math.round(coords.x * image_cropper.x_shift_ratio));
    $("#crop_y").val(Math.round(coords.y * image_cropper.y_shift_ratio));
    $("#crop_w").val(Math.round(coords.w * image_cropper.x_shift_ratio));
    $("#crop_h").val(Math.round(coords.h * image_cropper.y_shift_ratio));
  }
};