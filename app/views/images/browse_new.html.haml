- content_for :head do
  = stylesheet_link_tag('scss/new_image.css', 'scss/sale.css')

- content_for :right_content do
  .text.black.font18.bold= @image.name
  .line-separator
  .user-section.left
    - is_current_user = is_current_user(@author.id)
    - images_count = is_current_user ? @author.images.count : @author.public_images.count
    - author_profile = url_for(:controller => 'profiles', :action => 'show', :user_id => @author.id)
    %a{:href => "#{ author_profile }"}
      = image_tag @author.avatar_url(:small), :class => 'avatar small left'
    .left
      %span.text.gray.font12.line12 By
      %a.text.black.normal.font12.line12{:href => "#{ author_profile }"}= @author.username.truncate(20)
      .text.gray.font11= "#{@author.fullname} &bull; #{ pluralize(images_count, 'Item')}".html_safe
    - if is_current_user
      %a#btn-edit.button.edit.right{ :href => "#{ url_for(:controller => 'galleries', :action => 'edit_images', :gallery_id => @image.gallery_id) }" }
    - else
      - is_author_following = @author.has_follower?(current_user.id)
      - follow_class = is_author_following ? 'unfollow' : 'follow'
      #btn-follow.button.right{ :class => "#{ follow_class }", :data => { 'author-id' => "#{ @author.id }", 'following' => "#{ is_author_following }"} }
  .line-separator.left
  .text.black.font12.left= "Uploaded on #{@image.created_at.strftime('%B %d, %Y')}"
  .line-separator.left
  .text.gray.font12.line16.left
    Lorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labone et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco.

  .clear
  .text.black.font12{:style => 'margin-top:30px;'} Related images
  .line-separator.left
  .clearfix
    - if @images.blank?
      .empty-data= "There is no image. Please add image."
    - else
      - (0...@images.length). each do |idx|
        - image = @images[idx]
        - url = url_for(:controller => "images", :action => "browse", :id => "#{image.id}")
        - additional_class = (idx%4 == 0) ? "no-padding-left" : ((idx%4==3) ? "no-padding-right" : "")
        .image-container.small{:id => "image-container-#{image.id}", :title=>"#{image.name}", :class => "#{additional_class}"}
          %a{ :href => "#{url}" }
            = image_tag image.data(:small), :class => 'image small left'

#email-sharing-popup.left.hide
  .header.left
    .email-icon.left
    .text.bold.left Share Via Email
    %a.close{:href=>'#'}
      .right{:onclick => "$('#social-sharing').hasClass('hide');"} &times;
  .main.right
    #preview.left
      .image-container.thumb
        = image_tag @image.data.url(:thumb), :class => 'image thumb'
      .text.bold.clear= @image.name.truncate(20)
      .text.fuzzy.clear= "by #{ @image.username.truncate(15) }"
    #info.right
      .text.bold{ :style => 'margin-top:-4px;' } Email Address
      - action_url = url_for(:controller => 'images', :action => 'mail_shared_image', :id => @image.id)
      = simple_form_for(:email, :url => action_url, :method => 'post', :class => 'left', :html => { :id => 'email-details' }) do |f|
        = f.input :emails, :label => false, :required => true, :as => :string
        = f.input :message, :as => :text, :label => false, :required => false
        #button-container.right
          #btn-send.button.send.left
          #btn-cancel.button.cancel.left

.sections
  .image-container.medium.clearfix
    = image_tag @image.data.url(:medium), :class => 'image medium'

  #social-sharing.hide
    .main.left
      %a.close{:href=>'#'}
        .right{:onclick => "$('#social-sharing').hasClass('hide');"} &times;
      .container.left
        .text.black.bold.font14.line12.left Share this via:
        .text.black.font11.line12.right{ :style => 'padding-top:1px;'} Share Preferences
        .line-separator.left
        .buttons-container.left
          - public_url = url_for(:controller => 'images', :action => 'public', :id => params[:id], :only_path => false)
          - flickr_request = url_for(:controller => 'images', :action => 'post_image_to_flickr', :id => params[:id], :only_path => false)
          %a.email.button.left.no-padding-left{ :href => '#', :onclick => 'showEmailPopup();' }
          %a.facebook.button.left{ :href => "http://www.facebook.com/sharer.php?u=#{public_url}", :title => "Share on Facebook", :target=>"_blank" }
          %a.twitter.button.left{ :href=>"http://twitter.com/share?url=#{CGI.escape(public_url)}&text=#{CGI.escape('from UPLO')}", :title => "Share on Twitter", :target=>"_blank" }
          %a.flickr.button.left{ :href => "#{flickr_request}", :title => "Share on Flickr", :target => "_blank" }
          %a.tumblr.button.left{ :href => "http://www.tumblr.com/share/photo?source=#{CGI.escape(@image.data.url(:medium))}&caption=#{CGI.escape('from UPLO')}&clickthru=#{CGI.escape(public_url)}", :title => "Share on Tumblr" }
          %a.pinterest.button.left.no-padding-right.not-implement{ :href => '#' }
    .tail.left
      .icon.right

  .actions.left
    .left
      .like.left
        .icon.left
        .times.text.fuzzy-gray.bold.font16.left= @image.likes
        .label.text.fuzzy-gray.font16.left= pluralize_without_count(@image.likes, 'Like')
      .comment.text.fuzzy-gray.font16.left
        .icon.left
        .times.text.fuzzy-gray.bold.left= @image.comments.count
        .label.text.fuzzy-gray.font16.left= pluralize_without_count(@image.comments.count, 'Comment')
    .right
      - like_class = @dislike ? "dislike" : "like"
      - order_url = url_for(:controller => 'images', :action => 'order', :id => params[:id])
      #btn-like.button.left{:class => "#{like_class}", :onclick => 'update_liked();', :data => { 'id' => params[:id], 'dislike' => "#{ @dislike }" }}
      .button.flag.left
      .button.order.left{:onclick => "window.location.href = '#{order_url}';", :data => {:url => "#{order_url}"}}
      .button.share.left{:onclick => "display_sharing_box();"}

  .line-separator.clear
  #comments-section{ :data => { :id => "#{@image.id}" }}
    .header.text.black.font18.bold Comments and faves
    #current_comments
      = render :partial => 'comments_template', :locals => { :comments => @comments }
    .user-section.left
      %a{ :href => "#{ url_for(:controller => 'profiles', :action => 'show', :user_id => current_user.id)}" }
        = image_tag current_user.avatar_url(:medium), :class => "avatar medium left"
      .left
        = form_for :comment, :url => '/comments', :method => 'post', :html => {:id =>'frm-comment'} do |f|
          = f.text_area :description, :class => 'text gray font12 left', :title => 'Add your comment here...'
          = f.hidden_field :image_id, :value => @image.id
          #post-comment.button.post-comment.clear
  .clear


- content_for :js do
  = javascript_include_tag('http://platform.tumblr.com/v1/share.js', 'lib/jquery.inputHintOverlay.js', 'app/image.js')
  = javascript_tag do
    :erb
      $(".not-implement").click(function(e){
        e.preventDefault();
        helper.alert_not_implement();
        return false;
      });
      $('#email-sharing-popup .close').click(function(){
        $.modal.close();
      });
      $('#btn-follow').click(function(){
        var author_id = $(this).attr('data-author-id');
        var is_unfollow = $(this).attr('data-following');
        $.ajax({
          url: '/users/follow',
          type: "GET",
          data: { user_id:author_id, unfollow: is_unfollow },
          dataType: "json",
          success: function(response){
            if(response.success==false){
              alert(response.msg);
            } else if(is_unfollow=='false') {
              $('#btn-follow').attr('data-following', 'true');
              $('#btn-follow').removeClass('follow');
              $('#btn-follow').addClass('unfollow');
            } else {
              $('#btn-follow').attr('data-following', 'false');
              $('#btn-follow').removeClass('unfollow');
              $('#btn-follow').addClass('follow');
            }
          }
        });
      });
      $('#btn-cancel').click(function(){
        $.modal.close();
      });
      $('#btn-send').click(function(){
        var emails = $('#email_emails').val().split(',');
        var reg = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
        for(var i=0; i < emails.lenght; i++){
          if( !reg.test(emails[i].trim()) ){
            alert('Please enter an email address!');
            return false;
          }
        }
        $('#email-details').submit();
      });
      $('#social-sharing .close .right').click(function(){
        $('#social-sharing').addClass('hide');
      });

      function showEmailPopup(){
        $('#social-sharing').addClass('hide');
        $("#email-sharing-popup").modal();
      };

      function display_sharing_box() {
        var box, top, left;
        box = $('#social-sharing');
        btn_share = $('.button.share');
        img = $('.sections .image-container.medium');
        if(box.hasClass('hide')) {
          top = img.height() - box.height() + 2;
          left = img.width() - box.width() + 18;
          box.removeClass('hide');
          box.css('top', top + 'px');
          box.css('left', left + 'px');
        } else {
          box.addClass('hide');
        }
      }

      function update_liked(){
        var image_id = $('#btn-like').attr('data-id');
        var is_dislike = $('#btn-like').attr('data-dislike');
        $.ajax({
          url: '/images/switch_like',
          type: "GET",
          data: { id:image_id, dislike:is_dislike },
          dataType: "json",
          success: function(response){
            if(response.success==true){
              $(".actions .like .times").html(response.likes);
              $(".actions .like .label").html(helper.pluralize_without_count(response.likes, 'Like', 'Likes'));
              if(is_dislike == 'true'){
                $("#btn-like").attr('data-dislike', 'false');
                $('#btn-like').removeClass('dislike');
                $('#btn-like').addClass('like');
              }else{
                $("#btn-like").attr('data-dislike', 'true');
                $('#btn-like').removeClass('like');
                $('#btn-like').addClass('dislike');
              }
            }
          },
          fail: function(){}
        });
      }

      !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");
